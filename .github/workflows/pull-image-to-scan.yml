name: "Kong image pull & Trivy scan"

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag for kong/kong-gateway (e.g. 3.11 or latest)"
        required: true
        default: "latest"
      severity:
        description: "Fail threshold (comma separated). e.g. CRITICAL,HIGH"
        required: true
        default: "CRITICAL,HIGH"
      fail_on_severity:
        description: "Return non-zero (fail the job) if vulnerabilities at/above severity are found"
        required: true
        default: "true"   # "true" or "false"

permissions:
  contents: read
  actions: read
  security-events: write   # SARIF アップロードに必要

concurrency:
  group: kong-image-scan-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_REPO: kong/kong-gateway

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: (Optional) Docker Hub login
        
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull image
        run: |
          IMAGE="${{ env.IMAGE_REPO }}:${{ inputs.image_tag }}"
          echo "Pulling ${IMAGE}..."
          docker pull "${IMAGE}"
          echo "Pulled: "
          docker images | grep "${{ env.IMAGE_REPO }}" || true

      # Trivy DB キャッシュ（高速化）
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      # 1) SARIF/JSON を作る（CI やレポート用途）
      - name: Trivy scan (SARIF/JSON)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: ${{ env.IMAGE_REPO }}:${{ inputs.image_tag }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          limit-severities-for-sarif: true
          exit-code: '0'
          
      - name: Trivy scan (JSON report)
        if: always() # 失敗時でも JSON を残す
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: ${{ env.IMAGE_REPO }}:${{ inputs.image_tag }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'json'
          output: 'trivy-results.json'
          vuln-type: 'os,library'
          exit-code: ${{ inputs.fail_on_severity == 'true' && '1' || '0' }}

      # 2) Job サマリー用の表を出す（人が見やすい）
      - name: Trivy scan (table for job summary)
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: ${{ env.IMAGE_REPO }}:${{ inputs.image_tag }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'table'
          output: 'trivy-table.txt'
          vuln-type: 'os,library'
          exit-code: '0'
      - name: Append summary
        if: always()
        run: |
          echo "## Trivy scan summary for ${{ env.IMAGE_REPO }}:${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '閾値（severity）: `${{ inputs.severity }}` / Fail: `${{ inputs.fail_on_severity }}`' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-table.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      # 生成物をアーティファクトとして保存
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ inputs.image_tag }}
          path: |
            trivy-results.sarif
            trivy-results.json
            trivy-table.txt
          if-no-files-found: ignore

  publish:
    name: "Publish to GHCR (only if scan passed)"
    needs: scan
    if: ${{ needs.scan.result == 'success' }}
    uses: ./.github/workflows/publish-to-ghcr.yml
    permissions:
      contents: read
      packages: write      # ← ここで付与（呼び出し側で指定できる）
    with:
      image_tag: ${{ inputs.image_tag }}                 # 例: latest
      source_image_repo: kong/kong-gateway
      # ghcr_image を明示したい場合は下記を有効化（デフォルトはghcr.io/<owner>/kong-gateway:<tag> ）
      # ghcr_image: ghcr.io/${{ github.repository_owner }}/kong-gateway:${{ inputs.image_tag }}

