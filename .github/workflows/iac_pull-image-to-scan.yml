name: "Kong image pull & Trivy scan"

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag for kong/kong-gateway (e.g. 3.11 or latest)"
        required: true
        default: "latest"
      severity:
        description: "Fail threshold (comma separated). e.g. CRITICAL,HIGH"
        required: true
        default: "CRITICAL,HIGH"
      fail_on_severity:
        description: "Return non-zero (fail the job) if vulnerabilities at/above severity are found"
        required: true
        default: "true"   # "true" or "false"
      env:
        description: "Deployment environment identifier (e.g., poc, dev, stg, prd)"
        required: true
        default: "poc"
      service:
        description: "Service or application name associated with this Data Plane (e.g., bookinfo)"
        required: true
        default: "bookinfo"

permissions:
  contents: read
  actions: read
  security-events: write   # SARIF アップロードに必要

concurrency:
  group: kong-image-scan-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_REPO: kong/kong-gateway

jobs:
  scan:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform: [ "linux/amd64", "linux/arm64" ]

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: (Optional) Docker Hub login
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Resolve platform digest (manifest list → digest)
        id: digest
        env:
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          IMAGE_TAG:  ${{ inputs.image_tag }}
          PLATFORM:   ${{ matrix.platform }}
        run: |
          set -euo pipefail
          IMAGE="${IMAGE_REPO}:${IMAGE_TAG}"

          echo "Resolving digest for ${IMAGE} (${PLATFORM}) ..."
          # manifest list を取得し、指定プラットフォームの digest を抽出
          RAW=$(docker manifest inspect "${IMAGE}")
          if [ -z "${RAW}" ]; then
            echo "Failed to fetch manifest list for ${IMAGE}"
            exit 1
          fi

          # .platform.os + "/" + .platform.architecture が "linux/amd64" 等に一致する要素の digest を抽出
          DIGEST=$(echo "${RAW}" | jq -r --arg plat "${PLATFORM}" '.manifests[] | select((.platform.os + "/" + .platform.architecture) == $plat) .digest')

          if [ -z "${DIGEST}" ] || [ "${DIGEST}" = "null" ]; then
            echo "Could not resolve digest for ${PLATFORM}. Available manifests are:"
            echo "${RAW}" | jq -r '.manifests[] | "\(.platform.os)/\(.platform.architecture)  \(.digest)"'
            exit 1
          fi

          IMAGE_DIGEST="${IMAGE_REPO}@${DIGEST}"
          echo "Resolved: ${IMAGE_DIGEST}"

          echo "image_ref=${IMAGE_DIGEST}" >> "$GITHUB_OUTPUT"
          echo "plat_tag=$(echo "${PLATFORM}" | tr '/' '-')" >> "$GITHUB_OUTPUT"

      # Trivy DB キャッシュ（高速化）
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      # 1) SARIF（可視化専用、常に成功）
      - name: Trivy scan (SARIF for ${{ matrix.platform }})
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: ${{ steps.digest.outputs.image_ref }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'sarif'
          output: trivy-results-${{ steps.digest.outputs.plat_tag }}.sarif
          vuln-type: 'os,library'
          limit-severities-for-sarif: true
          exit-code: '0'

      # 2) JSON（ゲート：CRITICAL/HIGH で失敗可）
      - name: Trivy scan (JSON report for ${{ matrix.platform }})
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: ${{ steps.digest.outputs.image_ref }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'json'
          output: trivy-results-${{ steps.digest.outputs.plat_tag }}.json
          vuln-type: 'os,library'
          exit-code: ${{ inputs.fail_on_severity == 'true' && '1' || '0' }}

      # 3) Table（サマリー用）
      - name: Trivy scan (table for ${{ matrix.platform }})
        if: always()
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: ${{ steps.digest.outputs.image_ref }}
          severity: ${{ inputs.severity }}
          ignore-unfixed: true
          format: 'table'
          output: trivy-table-${{ steps.digest.outputs.plat_tag }}.txt
          vuln-type: 'os,library'
          exit-code: '0'

      - name: Append summary (${{ matrix.platform }})
        if: always()
        run: |
          echo "## Trivy scan summary for ${{ env.IMAGE_REPO }}:${{ inputs.image_tag }} (${{ matrix.platform }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '閾値（severity）: `${{ inputs.severity }}` / Fail: `${{ inputs.fail_on_severity }}`' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-table-${{ steps.digest.outputs.plat_tag }}.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # 4) 生成物をアーティファクトとして保存
      - name: Upload artifacts (${{ matrix.platform }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-${{ inputs.image_tag }}-${{ steps.digest.outputs.plat_tag }}
          path: |
            trivy-results-${{ steps.digest.outputs.plat_tag }}.sarif
            trivy-results-${{ steps.digest.outputs.plat_tag }}.json
            trivy-table-${{ steps.digest.outputs.plat_tag }}.txt
          if-no-files-found: ignore
  publish:
    name: "Publish to GHCR (only if scan passed)"
    needs: scan
    if: ${{ needs.scan.result == 'success' }}
    uses: ./.github/workflows/iac_publish-to-ghcr.yml
    permissions:
      contents: read
      packages: write      # ← ここで付与（呼び出し側で指定できる）
    with:
      image_tag: ${{ inputs.image_tag }}                 # 例: latest
      source_image_repo: kong/kong-gateway
      # ghcr_image を明示したい場合は下記を有効化（デフォルトはghcr.io/<owner>/kong-gateway:<tag> ）
      # ghcr_image: ghcr.io/${{ github.repository_owner }}/kong-gateway:${{ inputs.image_tag }}

  deploy:
    name: "Deploy to AKS (Konnect Data Plane)"
    needs: publish
    if: ${{ needs.publish.result == 'success' }}  # push 成功時のみ
    uses: ./.github/workflows/iac_deploy-to-aks.yml
    permissions:
      id-token: write
      contents: read
    with:
      ghcr_image: ${{ needs.publish.outputs.published_image }}
      resource_group: RD-Communication
      cluster_name: kong-bootcamp01
      namespace: kong-${{ inputs.env }}-${{ inputs.service }}
      deployment_name: kong-dp-${{ inputs.env }}-${{ inputs.service }}
      container_name: proxy
      create_pull_secret: "true"                  # Private GHCR の場合は "true"
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      # private pull 時のみ使用（PAT: read:packages を推奨）
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      KONNECT_TOKEN: ${{ secrets.KONNECT_TOKEN }}

  show-endpoint:
    name: "Show DP Global Endpoint"
    needs: deploy
    if: ${{ needs.deploy.result == 'success' }}   # デプロイ成功時のみ
    runs-on: ubuntu-latest
    steps:
      - name: Append endpoint to Job Summary
        run: |
          echo "## Kong DP Global Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Namespace      : \`kong-${{ inputs.env }}-${{ inputs.service }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Service        : \`${{ needs.deploy.outputs.dp_service_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- EXTERNAL-IP    : \`${{ needs.deploy.outputs.dp_external_ip }}\`" >> $GITHUB_STEP_SUMMARY

          # 便利表示（URL候補）
          HOST="${{ needs.deploy.outputs.dp_external_ip }}"
          [ -z "$HOST" ] && HOST="${{ needs.deploy.outputs.dp_external_hostname }}"
          if [ -n "$HOST" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Try:**  \`curl -i https://$HOST\`" >> $GITHUB_STEP_SUMMARY
          fi
