name: "Publish image to GHCR (multi-arch mirror)"

on:
  workflow_call:
    inputs:
      image_tag:
        description: "Tag to publish (e.g. latest or 3.11)"
        required: true
        type: string
      source_image_repo:
        description: "Source image repo (e.g. kong/kong-gateway)"
        required: true
        type: string
      ghcr_image:
        description: "Full GHCR image ref to push (e.g. ghcr.io/OWNER/kong-gateway:TAG). If empty, defaults to ghcr.io/<owner>/kong-gateway:<tag>"
        required: false
        type: string
        default: ""
    outputs:
      published_image:
        description: "Published GHCR image (name:tag)"
        value: ${{ jobs.publish.outputs.published_image }}

jobs:
  publish:
    name: "Mirror multi-arch to GHCR (manifest list)"
    runs-on: ubuntu-latest

    # GHCR へ publish するには packages: write が必要
    permissions:
      contents: read
      packages: write

    outputs:
      published_image: ${{ steps.out.outputs.image }}

    env:
      REPO_OWNER: ${{ github.repository_owner }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # buildx の imagetools はレジストリ上の manifest を操作するサブコマンド群
        # （multi-arch の manifest list を carbon copy できます）[3](https://docs.docker.com/reference/cli/docker/buildx/imagetools/)

      - name: Log in to GHCR
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      # GHCR は Actions の GITHUB_TOKEN で publish 可能（このジョブで packages: write が必要）[4](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)[5](https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions)

      # （必要なら）ソースレジストリへのログインを追加
      # - name: Login to source registry (optional)
      #   if: ${{ false }} # 例: ソースが private のとき true にする
      #   run: |
      #     echo "$SOURCE_TOKEN" | docker login registry-1.docker.io -u "$SOURCE_USER" --password-stdin

      - name: Resolve source and target refs
        id: ref
        run: |
          set -euo pipefail
          SRC="${{ inputs.source_image_repo }}:${{ inputs.image_tag }}"
          if [ -z "${{ inputs.ghcr_image }}" ]; then
            TARGET="ghcr.io/${{ env.REPO_OWNER }}/kong-gateway:${{ inputs.image_tag }}"
          else
            TARGET="${{ inputs.ghcr_image }}"
          fi
          echo "src=${SRC}" >> "$GITHUB_OUTPUT"
          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"
          echo "TARGET=${TARGET}" >> "$GITHUB_ENV"
          echo "Resolved: ${SRC}  ->  ${TARGET}"

      - name: Create multi-arch manifest on GHCR (carbon copy)
        run: |
          # 元タグが manifest list の場合は全プラットフォームを対象に carbon copy
          # （単一 manifest の場合でも list 化され、multi-arch 利用に備えられます）
          docker buildx imagetools create \
            --tag "${TARGET}" \
            "${{ steps.ref.outputs.src }}"
        # imagetools create はレジストリ上で新規 manifest list を作るコマンド。
        # ソースが list/index の場合は「carbon copy」を行います（--tag で宛先を指定）。[1](https://docs.docker.com/reference/cli/docker/buildx/imagetools/create/)[2](https://github.com/docker/buildx/blob/master/docs/reference/buildx_imagetools_create.md)

      - name: Inspect created image (platforms)
        run: |
          docker buildx imagetools inspect "${TARGET}"

      - name: Set output
        id: out
        run: |
          echo "image=${TARGET}" >> "$GITHUB_OUTPUT"
